// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	model "github.com/pir5/pir5-go/healthworker/model"
)

// NewPostRoutingpoliciesParams creates a new PostRoutingpoliciesParams object
// with the default values initialized.
func NewPostRoutingpoliciesParams() *PostRoutingpoliciesParams {
	var ()
	return &PostRoutingpoliciesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostRoutingpoliciesParamsWithTimeout creates a new PostRoutingpoliciesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostRoutingpoliciesParamsWithTimeout(timeout time.Duration) *PostRoutingpoliciesParams {
	var ()
	return &PostRoutingpoliciesParams{

		timeout: timeout,
	}
}

// NewPostRoutingpoliciesParamsWithContext creates a new PostRoutingpoliciesParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostRoutingpoliciesParamsWithContext(ctx context.Context) *PostRoutingpoliciesParams {
	var ()
	return &PostRoutingpoliciesParams{

		Context: ctx,
	}
}

// NewPostRoutingpoliciesParamsWithHTTPClient creates a new PostRoutingpoliciesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostRoutingpoliciesParamsWithHTTPClient(client *http.Client) *PostRoutingpoliciesParams {
	var ()
	return &PostRoutingpoliciesParams{
		HTTPClient: client,
	}
}

/*PostRoutingpoliciesParams contains all the parameters to send to the API endpoint
for the post routingpolicies operation typically these are written to a http.Request
*/
type PostRoutingpoliciesParams struct {

	/*HealthCheck
	  RoutingPolicy Object

	*/
	HealthCheck *model.ModelRoutingPolicy

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post routingpolicies params
func (o *PostRoutingpoliciesParams) WithTimeout(timeout time.Duration) *PostRoutingpoliciesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post routingpolicies params
func (o *PostRoutingpoliciesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post routingpolicies params
func (o *PostRoutingpoliciesParams) WithContext(ctx context.Context) *PostRoutingpoliciesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post routingpolicies params
func (o *PostRoutingpoliciesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post routingpolicies params
func (o *PostRoutingpoliciesParams) WithHTTPClient(client *http.Client) *PostRoutingpoliciesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post routingpolicies params
func (o *PostRoutingpoliciesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithHealthCheck adds the healthCheck to the post routingpolicies params
func (o *PostRoutingpoliciesParams) WithHealthCheck(healthCheck *model.ModelRoutingPolicy) *PostRoutingpoliciesParams {
	o.SetHealthCheck(healthCheck)
	return o
}

// SetHealthCheck adds the healthCheck to the post routingpolicies params
func (o *PostRoutingpoliciesParams) SetHealthCheck(healthCheck *model.ModelRoutingPolicy) {
	o.HealthCheck = healthCheck
}

// WriteToRequest writes these params to a swagger request
func (o *PostRoutingpoliciesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.HealthCheck != nil {
		if err := r.SetBodyParam(o.HealthCheck); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
