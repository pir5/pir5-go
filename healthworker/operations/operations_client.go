// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteHealthchecksID deletes health check

delete healthCheck
*/
func (a *Client) DeleteHealthchecksID(params *DeleteHealthchecksIDParams) (*DeleteHealthchecksIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHealthchecksIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteHealthchecksID",
		Method:             "DELETE",
		PathPattern:        "/healthchecks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteHealthchecksIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteHealthchecksIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteHealthchecksID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetHealthchecks gets healthchecks

get healthchecks
*/
func (a *Client) GetHealthchecks(params *GetHealthchecksParams) (*GetHealthchecksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHealthchecksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetHealthchecks",
		Method:             "GET",
		PathPattern:        "/healthchecks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetHealthchecksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetHealthchecksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetHealthchecks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostHealthchecks creates health check

create healthCheck
*/
func (a *Client) PostHealthchecks(params *PostHealthchecksParams) (*PostHealthchecksCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostHealthchecksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostHealthchecks",
		Method:             "POST",
		PathPattern:        "/healthchecks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostHealthchecksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostHealthchecksCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostHealthchecks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutHealthchecksID updates health check

update healthCheck
*/
func (a *Client) PutHealthchecksID(params *PutHealthchecksIDParams) (*PutHealthchecksIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutHealthchecksIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutHealthchecksID",
		Method:             "PUT",
		PathPattern:        "/healthchecks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutHealthchecksIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutHealthchecksIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutHealthchecksID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
