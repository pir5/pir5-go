// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ModelHealthCheck model health check
// swagger:model model.HealthCheck
type ModelHealthCheck struct {

	// check interval
	CheckInterval int64 `json:"checkInterval,omitempty"`

	// db
	Db string `json:"db,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// params
	Params *ModelHealthCheckParams `json:"params,omitempty"`

	// routing policies
	RoutingPolicies ModelRoutingPolicies `json:"routingPolicies,omitempty"`

	// threshould
	Threshould int64 `json:"threshould,omitempty"`

	// type
	Type int64 `json:"type,omitempty"`
}

// Validate validates this model health check
func (m *ModelHealthCheck) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoutingPolicies(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelHealthCheck) validateParams(formats strfmt.Registry) error {

	if swag.IsZero(m.Params) { // not required
		return nil
	}

	if m.Params != nil {
		if err := m.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params")
			}
			return err
		}
	}

	return nil
}

func (m *ModelHealthCheck) validateRoutingPolicies(formats strfmt.Registry) error {

	if swag.IsZero(m.RoutingPolicies) { // not required
		return nil
	}

	if err := m.RoutingPolicies.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("routingPolicies")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelHealthCheck) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelHealthCheck) UnmarshalBinary(b []byte) error {
	var res ModelHealthCheck
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
