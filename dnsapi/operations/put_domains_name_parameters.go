// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	model "github.com/pir5/pir5-go/dnsapi/model"
)

// NewPutDomainsNameParams creates a new PutDomainsNameParams object
// with the default values initialized.
func NewPutDomainsNameParams() *PutDomainsNameParams {
	var ()
	return &PutDomainsNameParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutDomainsNameParamsWithTimeout creates a new PutDomainsNameParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutDomainsNameParamsWithTimeout(timeout time.Duration) *PutDomainsNameParams {
	var ()
	return &PutDomainsNameParams{

		timeout: timeout,
	}
}

// NewPutDomainsNameParamsWithContext creates a new PutDomainsNameParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutDomainsNameParamsWithContext(ctx context.Context) *PutDomainsNameParams {
	var ()
	return &PutDomainsNameParams{

		Context: ctx,
	}
}

// NewPutDomainsNameParamsWithHTTPClient creates a new PutDomainsNameParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutDomainsNameParamsWithHTTPClient(client *http.Client) *PutDomainsNameParams {
	var ()
	return &PutDomainsNameParams{
		HTTPClient: client,
	}
}

/*PutDomainsNameParams contains all the parameters to send to the API endpoint
for the put domains name operation typically these are written to a http.Request
*/
type PutDomainsNameParams struct {

	/*Domain
	  Domain Object

	*/
	Domain *model.ModelDomain
	/*Name
	  Dorain Name

	*/
	Name string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put domains name params
func (o *PutDomainsNameParams) WithTimeout(timeout time.Duration) *PutDomainsNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put domains name params
func (o *PutDomainsNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put domains name params
func (o *PutDomainsNameParams) WithContext(ctx context.Context) *PutDomainsNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put domains name params
func (o *PutDomainsNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put domains name params
func (o *PutDomainsNameParams) WithHTTPClient(client *http.Client) *PutDomainsNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put domains name params
func (o *PutDomainsNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDomain adds the domain to the put domains name params
func (o *PutDomainsNameParams) WithDomain(domain *model.ModelDomain) *PutDomainsNameParams {
	o.SetDomain(domain)
	return o
}

// SetDomain adds the domain to the put domains name params
func (o *PutDomainsNameParams) SetDomain(domain *model.ModelDomain) {
	o.Domain = domain
}

// WithName adds the name to the put domains name params
func (o *PutDomainsNameParams) WithName(name string) *PutDomainsNameParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the put domains name params
func (o *PutDomainsNameParams) SetName(name string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *PutDomainsNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Domain != nil {
		if err := r.SetBodyParam(o.Domain); err != nil {
			return err
		}
	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
