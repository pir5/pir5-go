// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	model "github.com/pir5/pir5-go/dnsapi/model"
)

// NewPutRecordsDisableIDParams creates a new PutRecordsDisableIDParams object
// with the default values initialized.
func NewPutRecordsDisableIDParams() *PutRecordsDisableIDParams {
	var ()
	return &PutRecordsDisableIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutRecordsDisableIDParamsWithTimeout creates a new PutRecordsDisableIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutRecordsDisableIDParamsWithTimeout(timeout time.Duration) *PutRecordsDisableIDParams {
	var ()
	return &PutRecordsDisableIDParams{

		timeout: timeout,
	}
}

// NewPutRecordsDisableIDParamsWithContext creates a new PutRecordsDisableIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutRecordsDisableIDParamsWithContext(ctx context.Context) *PutRecordsDisableIDParams {
	var ()
	return &PutRecordsDisableIDParams{

		Context: ctx,
	}
}

// NewPutRecordsDisableIDParamsWithHTTPClient creates a new PutRecordsDisableIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutRecordsDisableIDParamsWithHTTPClient(client *http.Client) *PutRecordsDisableIDParams {
	var ()
	return &PutRecordsDisableIDParams{
		HTTPClient: client,
	}
}

/*PutRecordsDisableIDParams contains all the parameters to send to the API endpoint
for the put records disable ID operation typically these are written to a http.Request
*/
type PutRecordsDisableIDParams struct {

	/*ID
	  Record ID

	*/
	ID int64
	/*Record
	  Record Object

	*/
	Record *model.ModelRecord

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put records disable ID params
func (o *PutRecordsDisableIDParams) WithTimeout(timeout time.Duration) *PutRecordsDisableIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put records disable ID params
func (o *PutRecordsDisableIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put records disable ID params
func (o *PutRecordsDisableIDParams) WithContext(ctx context.Context) *PutRecordsDisableIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put records disable ID params
func (o *PutRecordsDisableIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put records disable ID params
func (o *PutRecordsDisableIDParams) WithHTTPClient(client *http.Client) *PutRecordsDisableIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put records disable ID params
func (o *PutRecordsDisableIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the put records disable ID params
func (o *PutRecordsDisableIDParams) WithID(id int64) *PutRecordsDisableIDParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the put records disable ID params
func (o *PutRecordsDisableIDParams) SetID(id int64) {
	o.ID = id
}

// WithRecord adds the record to the put records disable ID params
func (o *PutRecordsDisableIDParams) WithRecord(record *model.ModelRecord) *PutRecordsDisableIDParams {
	o.SetRecord(record)
	return o
}

// SetRecord adds the record to the put records disable ID params
func (o *PutRecordsDisableIDParams) SetRecord(record *model.ModelRecord) {
	o.Record = record
}

// WriteToRequest writes these params to a swagger request
func (o *PutRecordsDisableIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.Record != nil {
		if err := r.SetBodyParam(o.Record); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
